--- a/src/EmbeddingSpMDM.cc
+++ b/src/EmbeddingSpMDM.cc
@@ -188,7 +188,7 @@ GenEmbeddingSpMDMLookup<inType, indxType, offsetType, instSet, ROWWISE_SPARSE>::
         bool areIndices64b = std::is_same<indxType, std::int64_t>::value;
 
         asmjit::CodeHolder code;
-        code.init(runtime().codeInfo());
+        code.init(runtime().environment());
         x86::Assembler assembler(&code);
         x86::Emitter* a = assembler.as<x86::Emitter>();
 #if defined(FBGEMM_LOG_CODE)
@@ -264,7 +264,7 @@ GenEmbeddingSpMDMLookup<inType, indxType, offsetType, instSet, ROWWISE_SPARSE>::
                   const float*, // weights
                   float*, // out
                   const std::int32_t*, // compressed_indices_table and then mask
-                  const int*>(asmjit::CallConv::kIdHost));
+                  const int*>(asmjit::CallConv::kIdHost), a->environment());
         } else {
           func.init(asmjit::FuncSignatureT<
                     bool,
@@ -276,7 +276,7 @@ GenEmbeddingSpMDMLookup<inType, indxType, offsetType, instSet, ROWWISE_SPARSE>::
                     const offsetType*, // offsets or lengths
                     const float*, // weights
                     float*, // out and then mask
-                    const int*>(asmjit::CallConv::kIdHost));
+                    const int*>(asmjit::CallConv::kIdHost), a->environment());
         }
 
         asmjit::FuncFrame frame;
--- a/src/EmbeddingSpMDMNBit.cc
+++ b/src/EmbeddingSpMDMNBit.cc
@@ -168,7 +168,7 @@ typename ReturnFunctionSignature<indxType, offsetType, ROWWISE_SPARSE>::
         bool areIndices64b = is_same<indxType, int64_t>::value;
 
         asmjit::CodeHolder code;
-        code.init(runtime().codeInfo());
+        code.init(runtime().environment());
         x86::Assembler assembler(&code);
         x86::Emitter* a = assembler.as<x86::Emitter>();
 #if defined(FBGEMM_LOG_CODE)
@@ -245,7 +245,7 @@ typename ReturnFunctionSignature<indxType, offsetType, ROWWISE_SPARSE>::
                     const float*, // weights
                     float*, // out
                     const int32_t* /* compressed_indices_table */,
-                    const int* /* mask */>(asmjit::CallConv::kIdHost));
+                    const int* /* mask */>(asmjit::CallConv::kIdHost), a->environment());
         } else {
           func.init(asmjit::FuncSignatureT<
                     bool,
@@ -257,7 +257,7 @@ typename ReturnFunctionSignature<indxType, offsetType, ROWWISE_SPARSE>::
                     const offsetType*, // offsets or lengths
                     const float*, // weights
                     float*, // out
-                    const int* /* mask */>(asmjit::CallConv::kIdHost));
+                    const int* /* mask */>(asmjit::CallConv::kIdHost), a->environment());
         }
 
         asmjit::FuncFrame frame;
--- a/src/FbgemmI64.cc
+++ b/src/FbgemmI64.cc
@@ -138,7 +138,7 @@ CodeGenBase<int64_t, int64_t, int64_t, int64_t>::getOrCreate(
 
   return codeCache_.getOrCreate(kernelSig, [&]() -> jit_micro_kernel_fp {
     asmjit::CodeHolder code;
-    code.init(runtime().codeInfo());
+    code.init(runtime().environment());
     x86::Assembler assembler(&code);
     x86::Emitter* a = assembler.as<x86::Emitter>();
 #ifdef FBGEMM_LOG_CODE
@@ -180,7 +180,7 @@ CodeGenBase<int64_t, int64_t, int64_t, int64_t>::getOrCreate(
               int64_t*,
               int64_t*,
               int,
-              int>(asmjit::CallConv::kIdHost));
+              int>(asmjit::CallConv::kIdHost), a->environment());
 
     asmjit::FuncFrame frame;
     frame.init(func);
--- a/src/GenerateI8Depthwise.cc
+++ b/src/GenerateI8Depthwise.cc
@@ -203,7 +203,7 @@ GenI8Depthwise::jit_kernel_signature GenI8Depthwise::getOrCreate(
 
   return codeCache_.getOrCreate(kernelSig, [&]() -> jit_kernel_signature {
     asmjit::CodeHolder code;
-    code.init(runtime().codeInfo());
+    code.init(runtime().environment());
     x86::Assembler assembler(&code);
     x86::Emitter* e = assembler.as<x86::Emitter>();
 #ifdef FBGEMM_LOG_CODE
@@ -270,7 +270,7 @@ GenI8Depthwise::jit_kernel_signature GenI8Depthwise::getOrCreate(
               int,
               const int*,
               int,
-              const std::int32_t*>(asmjit::CallConv::kIdHost));
+              const std::int32_t*>(asmjit::CallConv::kIdHost), e->environment());
 
     asmjit::FuncFrame frame;
     frame.init(func);
--- a/src/GenerateKernelU8S8S32ACC16.cc
+++ b/src/GenerateKernelU8S8S32ACC16.cc
@@ -134,7 +134,7 @@ getOrCreate<inst_set_t::avx2>(
 
   return codeCache_.getOrCreate(kernelSig, [&]() -> jit_micro_kernel_fp {
     asmjit::CodeHolder code;
-    code.init(runtime().codeInfo());
+    code.init(runtime().environment());
     x86::Assembler assembler(&code);
     x86::Emitter* a = assembler.as<x86::Emitter>();
 
@@ -189,7 +189,7 @@ getOrCreate<inst_set_t::avx2>(
               int8_t*,
               int32_t*,
               int,
-              int>(asmjit::CallConv::kIdHost));
+              int>(asmjit::CallConv::kIdHost), a->environment());
 
     asmjit::FuncFrame frame;
     frame.init(func);
--- a/src/GenerateKernelU8S8S32ACC16Avx512.cc
+++ b/src/GenerateKernelU8S8S32ACC16Avx512.cc
@@ -100,7 +100,7 @@ CodeGenBase<uint8_t, int8_t, int32_t, int16_t>::getOrCreate(
 
   return codeCache_.getOrCreate(kernelSig, [&]() -> jit_micro_kernel_fp {
     asmjit::CodeHolder code;
-    code.init(runtime().codeInfo());
+    code.init(runtime().environment());
     x86::Assembler assembler(&code);
     x86::Emitter* a = assembler.as<x86::Emitter>();
 
@@ -152,7 +152,7 @@ CodeGenBase<uint8_t, int8_t, int32_t, int16_t>::getOrCreate(
               int8_t*,
               int32_t*,
               int,
-              int>(asmjit::CallConv::kIdHost));
+              int>(asmjit::CallConv::kIdHost), a->environment());
 
     asmjit::FuncFrame frame;
     frame.init(func);
--- a/src/GenerateKernelU8S8S32ACC32.cc
+++ b/src/GenerateKernelU8S8S32ACC32.cc
@@ -136,7 +136,7 @@ CodeGenBase<uint8_t, int8_t, int32_t, int32_t>::getOrCreate(
 
   return codeCache_.getOrCreate(kernelSig, [&]() -> jit_micro_kernel_fp {
     asmjit::CodeHolder code;
-    code.init(runtime().codeInfo());
+    code.init(runtime().environment());
     x86::Assembler assembler(&code);
     x86::Emitter* a = assembler.as<x86::Emitter>();
 #if defined(FBGEMM_LOG_CODE)
@@ -186,7 +186,7 @@ CodeGenBase<uint8_t, int8_t, int32_t, int32_t>::getOrCreate(
               int8_t*,
               int32_t*,
               int,
-              int>(asmjit::CallConv::kIdHost));
+              int>(asmjit::CallConv::kIdHost), a->environment());
 
     asmjit::FuncFrame frame;
     frame.init(func);
--- a/src/GenerateKernelU8S8S32ACC32Avx512VNNI.cc
+++ b/src/GenerateKernelU8S8S32ACC32Avx512VNNI.cc
@@ -88,7 +88,7 @@ CodeGenBase<uint8_t, int8_t, int32_t, int32_t>::getOrCreate(
 
   return codeCache_.getOrCreate(kernelSig, [&]() -> jit_micro_kernel_fp {
     asmjit::CodeHolder code;
-    code.init(runtime().codeInfo());
+    code.init(runtime().environment());
     x86::Assembler assembler(&code);
     x86::Emitter* a = assembler.as<x86::Emitter>();
 
@@ -134,7 +134,7 @@ CodeGenBase<uint8_t, int8_t, int32_t, int32_t>::getOrCreate(
               int8_t*,
               int32_t*,
               int,
-              int>(asmjit::CallConv::kIdHost));
+              int>(asmjit::CallConv::kIdHost), a->environment());
 
     asmjit::FuncFrame frame;
     frame.init(func);
--- a/src/GroupwiseConv.cc
+++ b/src/GroupwiseConv.cc
@@ -175,7 +175,7 @@ jit_conv_kernel_fp getOrCreateConvKernel(
 template <int SPATIAL_DIM, inst_set_t INST_SET>
 jit_conv_kernel_fp GenConvKernel<SPATIAL_DIM, INST_SET>::getOrCreate() {
   asmjit::CodeHolder code;
-  code.init(this->runtime().codeInfo());
+  code.init(this->runtime().environment());
   x86::Assembler assembler(&code);
   x86::Emitter* a = assembler.as<x86::Emitter>();
 
@@ -224,7 +224,7 @@ jit_conv_kernel_fp GenConvKernel<SPATIAL_DIM, INST_SET>::getOrCreate() {
              int32_t,
              int32_t,
              int32_t,
-             int32_t*>(asmjit::CallConv::kIdHost));
+             int32_t*>(asmjit::CallConv::kIdHost), a->environment());
 
   frame_.init(func_);
 
--- a/src/RowWiseSparseAdagradFused.cc
+++ b/src/RowWiseSparseAdagradFused.cc
@@ -120,7 +120,7 @@ typename ReturnFunctionSignature<indxType, offsetType, dataType>::
                 offsetType,
                 dataType>::jit_sparse_adagrad_kernel {
         asmjit::CodeHolder code;
-        code.init(runtime().codeInfo());
+        code.init(runtime().environment());
         x86::Assembler assembler(&code);
         x86::Emitter* a = assembler.as<x86::Emitter>();
         bool areIndices64b = is_same<indxType, int64_t>::value;
@@ -169,7 +169,7 @@ typename ReturnFunctionSignature<indxType, offsetType, dataType>::
                   const int*, // lengths
                   float, // epsilon
                   float, // lr then rand_buffer
-                  uint32_t*>(asmjit::CallConv::kIdHost));
+                  uint32_t*>(asmjit::CallConv::kIdHost), a->environment());
 
         asmjit::FuncFrame frame;
         frame.init(func);
--- a/src/SparseAdagrad.cc
+++ b/src/SparseAdagrad.cc
@@ -452,7 +452,7 @@ GenSparseAdagrad<indxType, instSet>::getOrCreate(
       [&]() ->
       typename ReturnFunctionSignature<indxType>::jit_sparse_adagrad_kernel {
         asmjit::CodeHolder code;
-        code.init(runtime().codeInfo());
+        code.init(runtime().environment());
         x86::Assembler assembler(&code);
         x86::Emitter* a = assembler.as<x86::Emitter>();
         bool areIndices64b = std::is_same<indxType, std::int64_t>::value;
@@ -509,7 +509,7 @@ GenSparseAdagrad<indxType, instSet>::getOrCreate(
                   const int*, // mask_avx2
                   float, // weight_decay
                   const double*, // counter then counter_halflife
-                  std::int64_t>(asmjit::CallConv::kIdHost));
+                  std::int64_t>(asmjit::CallConv::kIdHost), a->environment());
 
         asmjit::FuncFrame frame;
         frame.init(func);
